<?php

/**
 * PluginmyCurrency
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author     pycmam <pycmam@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmyCurrency extends BasemyCurrency
{
    /**
     * @var myCurrency базовая валюта
     */
    protected static $_base = null;

    /**
     *
     * @return Currency
     */
    protected static function getBase()
    {
        if (is_null(self::$_base)) {
            self::$_base = myCurrencyTable::getInstance()->getBaseCurrency();

            if (! self::$_base || ! self::$_base->getCourse()) {
                throw new sfException(__METHOD__ . ': base currency doesn\'t exists');
            }
        }

        return self::$_base;
    }


    /**
     * Конвертировать валюту
     *
     * @param decimal $value
     * @param int     $currencyId
     *
     * return decimal
     */
    public static function convert($value, $currencyId = null)
    {
        $base = self::getBase();

        if (is_null($currencyId) || $currencyId == $base->getId()) {
            return $value;
        }

        $currency = myCurrencyTable::getInstance()->findOneById($currencyId);

        return $value * $base->getCourse() / $currency->getCourse();
    }


    /**
     * Конвертировать валюту по аббревиатуре
     *
     * @param decimal $value
     * @param string  $currency
     *
     * return decimal
     */
     public static function convertByAbbr($value, $currency)
     {
         $currency = myCurrencyTable::getInstance()->findOneByAbbreviation($currency);

         if ($currency) {
             return self::convert($value, $currency->getId());
         }

         throw new sfException(__METHOD__.': Invalid currency abbreviation');
     }



    /**
     * Конвертировать из текущей в базовую
     *
     * @param decimal $value
     * @param int     $currencyId
     *
     * return decimal
     */
    public static function convertToBase($value, $currencyId)
    {
        $base = self::getBase();

        if (is_null($currencyId) || $currencyId == $base->getId()) {
            return $value;
        }

        $currency = myCurrencyTable::getInstance()->findOneById($currencyId);

        return $value * $currency->getCourse() / $base->getCourse();
    }
}